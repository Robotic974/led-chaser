/*
 * -------------------------------------------------------------------------
 * Atelier de programmation Robotic 974
 * ¬© 2020 St√©phane Calderoni
 * -------------------------------------------------------------------------
 * Introduction √† la programmation des cartes Arduino
 * Impl√©mentation d'un chenillard √† 8 LEDs
 * -------------------------------------------------------------------------
 * Simple animation p√©riodique
 * -------------------------------------------------------------------------
 */

#include <Arduino.h>

/**
 * @brief Nombre de LEDs.
 */
const uint8_t NUM_LEDS = 8;

/**
 * @brief Broches de commande des LEDs.
 */
const uint8_t LED_PIN[] = { 5, 6, 7, 8, 9, 10, 11, 12 };

/**
 * @brief Nombre d'√©tapes que comporte l'animation.
 * 
 * @note Une animation est ici consid√©r√©e comme un encha√Ænement
 *       de motifs pr√©d√©finis √† afficher dans un ordre donn√©.
 *       Chaque motif correspond ainsi √† une √©tape de l'animation.
 */
const uint8_t ANIMATION_STEPS = 10;

/**
 * @brief S√©quence ordonn√©e de motifs pr√©d√©finis qui constitue
 *        les diff√©rentes √©tapes de l'animation.
 * 
 * @note L'id√©e consiste ici √† repr√©senter chaque √©tape de l'animation
 *       par un motif binaire d√©crivant l'√©tat du chenillard √† l'aide
 *       d'un simple nombre entier cod√© sur 8 bits (pour 8 LEDs).
 * 
 *       En effet, pour chaque √©tape, lorsque le bit d'indice `i` est √† 1
 *       alors la LED d'indice `i` est allum√©e. Si le bit est √† 0, alors
 *       la LED est √©teinte.
 * 
 *       L'animation qui est d√©compos√©e ci-dessous est un petit clin d'oeil
 *       √† la c√©l√®bre voiture intelligente nomm√©e KITT, mise en sc√®ne dans
 *       la s√©rie t√©l√©vis√©e K2000 des ann√©es 80  üòâ
 * 
 *       @see https://youtu.be/iN3rvvkHo1M
 * 
 *       Pour une meilleure lisibilit√©, les entiers sont ici d√©finis sous
 *       leur forme d'√©criture binaire et sont donc pr√©fix√©s par `0b`.
 * 
 *       On pourrait √©galement d√©finir ces m√™mes entiers sous leurs formes
 *       d'√©critures hexad√©cimale (pr√©fixe `0x`) ou d√©cimale (sans pr√©fixe).
 *       Cela revient strictement au m√™me pour le compilateur.
 */
const uint8_t ANIMATION[] = {
    0b11100000, // √©tape #0    0xe0    224
    0b01110000, // √©tape #1    0x70    112
    0b00111000, // √©tape #2    0x38     56
    0b00011100, // √©tape #3    0x1c     28
    0b00001110, // √©tape #4    0x0e     14
    0b00000111, // √©tape #5    0x07      7
    0b00001110, // √©tape #6    0x0e     14
    0b00011100, // √©tape #7    0x1c     28
    0b00111000, // √©tape #8    0x38     56
    0b01110000  // √©tape #9    0x70    112
};

/**
 * @brief Dur√©e pendant laquelle on affiche le motif courant de l'animation.
 */
const uint8_t ANIMATION_STEP_DURATION_MS = 100;

/**
 * @brief Indice du motif courant de l'animation.
 */
uint8_t animation_step = 0;

/**
 * @brief Date √† laquelle on a affich√© le dernier motif courant de l'animation.
 */
uint32_t last_animation_step_ms = 0;

/**
 * @brief Affichage d'un motif binaire 8-bits sur le chenillard √† 8 LEDs.
 * 
 * @param n entier compris dans l'intervalle [0,255].
 */
void ledWrite(uint8_t n) {

    for (uint8_t i=0; i<NUM_LEDS; i++) {
        digitalWrite(LED_PIN[i], n & (1 << i));
    }

}

/**
 * @brief D√©marrage du programme.
 */
void setup() {

    // Configuration des broches de commande des LEDs.
    for (uint8_t i=0; i<NUM_LEDS; i++) {
        pinMode(LED_PIN[i], OUTPUT);
    }

    // On initialise la date de d√©marrage de l'afficheur.
    last_animation_step_ms = millis();
    
}

/**
 * @brief Boucle de contr√¥le principale.
 * 
 * @note Comme dans l'exercice pr√©c√©dent, on n'utilise
 *       plus la fonction delay() qui est bloquante.
 */
void loop() {

    // On d√©termine la date courante :
    uint32_t now = millis();

    // Si la dur√©e √©coul√©e depuis le dernier affichage de motif
    // a d√©pass√© la p√©riode d'attente que l'on s'est fix√©e...
    if (now - last_animation_step_ms > ANIMATION_STEP_DURATION_MS) {

        // Alors on affiche le motif binaire qui correspond √†
        // l'√©tape courante de l'animation :
        ledWrite(ANIMATION[animation_step]);

        // Puis on passe √† l'√©tape suivante :
        ++animation_step %= ANIMATION_STEPS;
        /*
         * L'instruction ci-dessus est une forme condens√©e de
         * la s√©quence suivante :
         * 
         *     animation_step = animation_step + 1;
         *     animation_step = animation_step % ANIMATION_STEPS;
         * 
         * Le compteur `animation_step` s'incr√©mente progressivement
         * pour balayer, dans l'ordre, chaque √©tape de l'animation,
         * puis revient √† z√©ro apr√®s avoir atteint la derni√®re √©tape,
         * gr√¢ce √† l'utilisation de l'op√©rateur de congruence % (modulo).
         * 
         * Enfin, on sauvegarde la date qui marque temporellement
         * l'affichage du dernier motif op√©r√© sur le chenillard :
         */
        last_animation_step_ms = now;

    }

}